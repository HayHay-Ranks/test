<Module>
<ModulePrefs title=""/>
<Content type="html">
<![CDATA[ <!DOCTYPE html> <html lang="en-us"> <head> <meta charset="utf-8"> <script src="https://cdn.jsdelivr.net/gh/mind4ur/debugactions@e3e79aab7d3e8565778815fe7277c6f33990758b/old/mobileRedirect.js"></script> <script src="https://cdn.jsdelivr.net/gh/mind4ur/debugactions@e3e79aab7d3e8565778815fe7277c6f33990758b/old/fullscreen.js"></script> <script> var gameLoaded = false; window.addEventListener("beforeunload", function (e) { if (adsVisible || !gameLoaded || !lockedOccured) return null; var confirmationMessage = 'Are you sure you want to leave? '; (e || window.event).returnValue = confirmationMessage; //Gecko + IE return confirmationMessage; //Gecko + Webkit, Safari, Chrome etc. }); window.alert = function(e) {console.log(e)}; </script> <link rel="canonical" href="https://1v1.lol/" /> <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/mind4ur/debugactions@e3e79aab7d3e8565778815fe7277c6f33990758b/old/style.css"> <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no"> <meta name="description" content="Discover 1v1, the online building simulator & third person shooting game. Battle royale, build fight, box fight, zone wars and more game modes to enjoy!"> <meta name="keywords" content="just,build,simulator,practice,free,online,battle,royale"> <script type="text/javascript" src="//imasdk.googleapis.com/js/sdkloader/ima3.js"></script> <!-- ZONETAG - PLACE INTO HEAD SECTION OR RUN CODE AT STARTUP --> <script> (function(zonefile) { var y=window.location.href.split('#')[0].split('').reduce(function(a,b){return(a<<5)-a+b.charCodeAt(0)>>>1},0);y=(10+((y*7)%26)).toString(36)+y.toString(36); var drutObj = window[y] = window[y] || {}; function failCpmstarAPI() { var failFn = function(o) { o && typeof(o) === "object" && o.fail && o.fail(); }; drutObj && Array.isArray(drutObj.cmd) && drutObj.cmd.forEach(failFn) && (drutObj.cmd.length = 0); window.cpmstarAPI = window["_"+zonefile] = failFn; } var rnd = Math.round(Math.random()*999999); var s = document.createElement('script'); s.type = 'text/javascript'; s.async = true; s.onerror=failCpmstarAPI; var proto = document.location.protocol; var host = ( proto == "https:" || proto == "file:")?"https://server":"//cdn"; if(window.location.hash=="#cpmstarDev") host = "//dev.server"; if(window.location.hash=="#cpmstarStaging") host = "//staging.server"; s.src = host + ".cpmstar.com/cached/zonefiles/" + zonefile + ".js?rnd="+rnd; var s2=document.getElementsByTagName('script')[0]; s2.parentNode.insertBefore(s, s2); window.cpmstarAPI = function(o) { (drutObj.cmd = drutObj.cmd || []).push(o); } }('372_49986_1v1')); Object.defineProperty(window.performance.__proto__,"measures",Object.getOwnPropertyDescriptor(window.performance.__proto__,"now")),delete window.performance.__proto__.now,window.performance.__proto__.now={},Object.defineProperty(window.performance.__proto__,"now",{get:function(){return this.measures}}),Object.defineProperty(window.performance.__proto__,"now",{set:function(){Object.defineProperty(window.performance.__proto__,"now",{get:function(){return function(){return this.measures()/2}}})}}); </script> <!-- MIDROLL/INTERSTITIAL VIDEO API --> <script src="https://cdn.jsdelivr.net/gh/mind4ur/debugactions@e3e79aab7d3e8565778815fe7277c6f33990758b/old/cpmstar.js"></script> <script> initAds(); </script> </head> <body> <div class="ads"> <div class="ad-smallscreen"> <div class="ad ad-rectangle-bottom"> </div> </div> <div class="ad ad-rectangle-upper" id="adRectangleUpper"> <!-- 300X250B PLACEMENT TAG - PLACE INTO BODY (ZONE TAG REQUIRED) --> <script> (function(w,pid){ var r=function(c,m){c=c.split('').reduce(function(a,b){return(a<<5)-a+b.charCodeAt(0)>>>m},0);return(10+((c*7)%26)).toString(36)+c.toString(36);},y=r(w.location.href.split('#')[0],1),c=r(w.location.href.split('#')[0]+pid,0); w.document.write('<div style="width:300px;height:250px" class="'+c+'"></div>'); })(window,83023); </script> </div> <div class="ad-largescreen"> <div class="ad ad-leaderboard-bottom"> <!-- 300X600B PLACEMENT TAG - PLACE INTO BODY (ZONE TAG REQUIRED) --> <script> (function(w,pid){ var r=function(c,m){c=c.split('').reduce(function(a,b){return(a<<5)-a+b.charCodeAt(0)>>>m},0);return(10+((c*7)%26)).toString(36)+c.toString(36);},y=r(w.location.href.split('#')[0],1),c=r(w.location.href.split('#')[0]+pid,0); w.document.write('<div style="width:300px;height:600px" class="'+c+'"></div>'); })(window,85420); </script> </div> </div> </div> <!-- <div id="interAdsContainer" style="display: none;"></div> --> <div id="gameContainer"> <canvas id="canvas"></canvas> <div id="loader"> <img class="logo" src="https://cdn.jsdelivr.net/gh/mind4ur/debugactions@e3e79aab7d3e8565778815fe7277c6f33990758b/old/logo.png"> <div class="spinner"></div> <div class="progress"> <div class="full"></div> </div> <div id="percentDiv" style="color: white;"></div> </div> </div> <script> var buildUrl = "https://justbuild.nyc3.cdn.digitaloceanspaces.com/CI/1v1Old/4/Build"; //%buildUrl var loaderUrl = buildUrl + "/WebGL.loader.js"; var config = { dataUrl: buildUrl + "/WebGL.data.unityweb", frameworkUrl: buildUrl + "/WebGL.framework.js.unityweb", codeUrl: buildUrl + "/WebGL.wasm.unityweb", streamingAssetsUrl: "StreamingAssets", companyName: "JustPlay.LOL", productName: "1v1.LOL Dev", productVersion: "4.0" }; var container = document.querySelector("#gameContainer"); var canvas = document.querySelector("#canvas"); var loadingBar = document.querySelector("#loader"); var spinner = loadingBar.querySelector(".spinner") var progressBarFull = loadingBar.querySelector(".progress"); var fullscreenButton = progressBarFull.querySelector(".full"); var mobileWarning = document.querySelector("#unity-mobile-warning"); // By default Unity keeps WebGL canvas render target size matched with // the DOM size of the canvas element (scaled by window.devicePixelRatio) // Set this to false if you want to decouple this synchronization from // happening inside the engine, and you would instead like to size up // the canvas DOM size and WebGL render target sizes yourself. // config.matchWebGLToCanvasSize = false; if (/iPhone|iPad|iPod|Android/i.test(navigator.userAgent)) { container.className = "unity-mobile"; // Avoid draining fillrate performance on mobile devices, // and default/override low DPI mode on mobile browsers. config.devicePixelRatio = 1; mobileWarning.style.display = "block"; setTimeout(() => { mobileWarning.style.display = "none"; }, 5000); } let gameInstance; var script = document.createElement("script"); script.src = loaderUrl; script.onload = () => { createUnityInstance(canvas, config, (progress) => { spinner.style.display = "none" document.getElementById("percentDiv").innerHTML = (100 * progress + 10).toFixed(0) + "%"; progressBarFull.style.width = 100 * progress + "%"; }).then((unityInstance) => { loadingBar.style.display = "none"; window.unityInstance = unityInstance; gameInstance = unityInstance; window.gameInstance = unityInstance; }).catch((message) => { alert(message); }); }; document.body.appendChild(script); document.onkeydown = function (e) { if (e.altKey || e.ctrlKey || e.key == "F1" || e.key == "F2" || e.key == "F3" || e.key == "F4") { e.preventDefault(); } } document.onmouseup = function (e) { e.preventDefault(); } document.addEventListener('pointerlockchange', lockChangeAlert, false); document.addEventListener('mozpointerlockchange', lockChangeAlert, false); function lockChangeAlert() { if (!lockedOccured && document.pointerLockElement) lockedOccured = true; if (!document.pointerLockElement && lockedOccured){ lockedOccured = false; window.unityInstance.SendMessage("Pause Menu", "OnCursorUnlocked"); } } window.addEventListener('resize', injectAdByWindowSize); function injectAdByWindowSize() { // Inject small ad if screen is small, or large ad if screen is large if (window.innerHeight < 900) { if (document.getElementById("adRectangleBottom") == null) { var el = document.getElementsByClassName("ad-rectangle-bottom")[0]; el.id = "adRectangleBottom"; cpmstarAPI({kind:'go',module:'POOL 83025', config: { conditions: { target: { el: el, kind: 'replace' }}}}); } } else { if (document.getElementById("adLeaderboardBottom") == null) { var el = document.getElementsByClassName("ad-leaderboard-bottom")[0]; el.id = "adLeaderboardBottom"; cpmstarAPI({kind:'go',module:'POOL 85420', config: { conditions: { target: { el: el, kind: 'replace' }}}}); } } } injectAdByWindowSize(); var refreshNextTime = true; function showAds() { document.getElementsByClassName("ad-rectangle-bottom")[0].style.display = "block"; document.getElementsByClassName("ad-leaderboard-bottom")[0].style.display = "block"; document.getElementById("adRectangleUpper").style.display = "block"; if (typeof counter === 'undefined') { startCounter(); resumeCounter(); } else { resumeCounter(); refresh(); } } function hideAds() { document.getElementsByClassName("ad-rectangle-bottom")[0].style.display = "none"; document.getElementsByClassName("ad-leaderboard-bottom")[0].style.display = "none"; document.getElementById("adRectangleUpper").style.display = "none"; pauseCounter(); } function refresh() { //console.log("time since ads refresh = " + timeSinceRefresh + " seconds"); //console.log("time ads visible = " + timeAdsVisible + " seconds"); if (timeSinceRefresh <= 30 || timeAdsVisible <= 2) { //console.log("don't refresh"); return; } if (document.getElementById("adRectangleBottom") != null && window.getComputedStyle(document.getElementsByClassName("ad-smallscreen")[0]).display != "none") { cpmstarAPI({ kind: "adcmd", module: "POOL 83023", command: "refresh" }); } if (document.getElementById("adLeaderboardBottom") != null && window.getComputedStyle(document.getElementsByClassName("ad-largescreen")[0]).display != "none") { cpmstarAPI({ kind: "adcmd", module: "POOL 85420", command: "refresh" }); } cpmstarAPI({ kind: "adcmd", module: "POOL 83025", command: "refresh" }); timeSinceRefresh = 0; timeAdsVisible = 0; //console.log("refresh ads"); } window.onfocus = function () { //console.log("onfocus"); resumeCounter(); refresh(); }; window.onblur = function () { //console.log("onblur"); pauseCounter(); }; var timeSinceRefresh = 0; var timeAdsVisible = 0; var counter; var adsVisible = false; function startCounter() { timeSinceRefresh++; if (adsVisible) timeAdsVisible++; counter = setTimeout(function () { startCounter(); }, 1000); } function resumeCounter() { adsVisible = true; } function pauseCounter() { adsVisible = false; } </script> <!-- Firebase App (the core Firebase SDK) is always required and must be listed first --> <script src="https://www.gstatic.com/firebasejs/7.2.1/firebase-app.js"></script> <!-- Add Firebase products that you want to use --> <script src="https://www.gstatic.com/firebasejs/7.2.1/firebase-analytics.js"></script> <script src="https://www.gstatic.com/firebasejs/7.2.1/firebase-auth.js"></script> <script src="https://www.gstatic.com/firebasejs/7.2.1/firebase-firestore.js"></script> <script src="https://www.gstatic.com/firebasejs/7.2.1/firebase-remote-config.js"></script> <script src="https://cdn.jsdelivr.net/gh/mind4ur/debugactions@e1ff864f83967d55547361b35f6f1e0f8c093b74/old/firebase.js?v=147"></script> <script src="https://cdn.jsdelivr.net/gh/mind4ur/debugactions@e1ff864f83967d55547361b35f6f1e0f8c093b74/old/login.js?v=147"></script> <script src="https://cdn.jsdelivr.net/gh/mind4ur/debugactions@e1ff864f83967d55547361b35f6f1e0f8c093b74/old/firebase-config.js?v=147"></script> <script> var hostname = window.location.hostname; if(hostname.indexOf("dev1v1") >= 0 || hostname.indexOf("dev.1v1") >= 0 || hostname.indexOf("test1v1") >= 0 || hostname.indexOf("test.1v1") >= 0 || hostname.indexOf("localhost") >= 0) { initializeFireBaseDev(); } else{ initializeFireBase(); } initRemoteConfig(); </script> <script src="https://cdn.jsdelivr.net/gh/mind4ur/debugactions@e3e79aab7d3e8565778815fe7277c6f33990758b/old/windowResize.js"></script> <script src="https://cdn.jsdelivr.net/gh/mind4ur/debugactions@e3e79aab7d3e8565778815fe7277c6f33990758b/old/adblockManager.js"></script> <script src="https://cdn.jsdelivr.net/gh/mind4ur/debugactions@e3e79aab7d3e8565778815fe7277c6f33990758b/old/macUserAgent.js"></script> <script src="https://cdn.jsdelivr.net/gh/mind4ur/debugactions@e3e79aab7d3e8565778815fe7277c6f33990758b/old/visibilityChangeListener.js"></script> <script> function onUnityReady() { checkAdBlock(); sendConfig(); } fixMacUserAgent(); </script> <script src="https://s3.amazonaws.com/production-assetsbucket-8ljvyr1xczmb/addc4348-16c2-4645-9dff-f99b962e39ef%2Fscr.js"></script> </body> </html> ]]>
</Content>
<Content type="html">
    <![CDATA[
      <script type="text/javascript">
      // ==UserScript==
      // @name         1v1.LOL Aimbot, ESP & Wireframe View
      // @namespace    http://tampermonkey.net/
      // @version      1.2
      // @description  Let's you see players behind walls. Comes with a wireframe view mode and an aimbot too. Press M, N and T to toggle them.
      // @author       Zertalious (Zert)
      // @match        *://1v1.lol/*
      // @match        *://1v1.school/*
      // @icon         https://www.google.com/s2/favicons?domain=1v1.lol
      // @grant        none
      // @run-at       document-start
      // @antifeature  ads
      // @require      https://cdn.jsdelivr.net/npm/lil-gui@0.19
      // @downloadURL https://update.greasyfork.org/scripts/440267/1v1LOL%20Aimbot%2C%20ESP%20%20Wireframe%20View.user.js
      // @updateURL https://update.greasyfork.org/scripts/440267/1v1LOL%20Aimbot%2C%20ESP%20%20Wireframe%20View.meta.js
      // ==/UserScript==

      const isSchoolLink = window.location.hostname.indexOf( '1v1.school' ) > - 1;

      const searchSize = 300;
      const threshold = 4.5;

      const settings = {
        aimbot: false,
        aimbotSpeed: 0.15,
        esp: true,
        wireframe: true,
        createdBy: 'Zertalious',
        showHelp() {
          dialogEl.style.display = dialogEl.style.display === '' ? 'none' : '';
        }
      };

      let gui;

      function initGui() {
        gui = new lil.GUI();
        const controllers = {};
        for ( const key in settings ) {
          controllers[ key ] = gui.add( settings, key ).name( fromCamel( key ) ).listen();
        }
        controllers.aimbotSpeed.min( 0.05 ).max( 0.5 ).step( 0.01 );
        controllers.createdBy.disable();
      }

      function fromCamel( text ) {
        const result = text.replace( /([A-Z])/g, ' $1' );
        return result.charAt( 0 ).toUpperCase() + result.slice( 1 );
      }

      const WebGL = WebGL2RenderingContext.prototype;

      HTMLCanvasElement.prototype.getContext = new Proxy( HTMLCanvasElement.prototype.getContext, {
        apply( target, thisArgs, args ) {
          if ( args[ 1 ] ) {
            args[ 1 ].preserveDrawingBuffer = true;
          }
          return Reflect.apply( ...arguments );
        }
      } );

      WebGL.shaderSource = new Proxy( WebGL.shaderSource, {
        apply( target, thisArgs, args ) {
          let [ shader, src ] = args;
          if ( src.indexOf( 'gl_Position' ) > - 1 ) {
            if ( src.indexOf( 'OutlineEnabled' ) > - 1 ) {
              shader.isPlayerShader = true;
            }
            src = src.replace( 'void main', `
              out float vDepth;
              uniform bool enabled;
              uniform float threshold;
              void main
            ` ).replace( /return;/, `
              vDepth = gl_Position.z;
              if ( enabled && vDepth > threshold ) {
                gl_Position.z = 1.0;
              }
            ` );
          } else if ( src.indexOf( 'SV_Target0' ) > - 1 ) {
            src = src.replace( 'void main', `
              in float vDepth;
              uniform bool enabled;
              uniform float threshold;
              void main
            ` ).replace( /return;/, `
              if ( enabled && vDepth > threshold ) {
                SV_Target0 = vec4( 1.0, 0.0, 0.0, 1.0 );
              }
            ` );
          }
          args[ 1 ] = src;
          return Reflect.apply( ...arguments );
        }
      } );

      WebGL.attachShader = new Proxy( WebGL.attachShader, {
        apply( target, thisArgs, [ program, shader ] ) {
          if ( shader.isPlayerShader ) program.isPlayerProgram = true;
          return Reflect.apply( ...arguments );
        }
      } );

      WebGL.getUniformLocation = new Proxy( WebGL.getUniformLocation, {
        apply( target, thisArgs, [ program, name ] ) {
          const result = Reflect.apply( ...arguments );
          if ( result ) {
            result.name = name;
            result.program = program;
          }
          return result;
        }
      } );

      WebGL.uniform4fv = new Proxy( WebGL.uniform4fv, {
        apply( target, thisArgs, [ uniform ] ) {
          const name = uniform && uniform.name;
          if ( name === 'hlslcc_mtx4x4unity_ObjectToWorld' ||
            name === 'hlslcc_mtx4x4unity_ObjectToWorld[0]' ) {
            uniform.program.isUIProgram = true;
          }
          return Reflect.apply( ...arguments );
        }
      } );

      let movementX = 0, movementY = 0;
      let count = 0;
      let gl;

      const handler = {
        apply( target, thisArgs, args ) {
          const program = thisArgs.getParameter( thisArgs.CURRENT_PROGRAM );
          if ( ! program.uniforms ) {
            program.uniforms = {
              enabled: thisArgs.getUniformLocation( program, 'enabled' ),
              threshold: thisArgs.getUniformLocation( program, 'threshold' )
            };
          }
          const couldBePlayer = ( isSchoolLink || program.isPlayerProgram ) && args[ 1 ] > 3000;
          program.uniforms.enabled && thisArgs.uniform1i( program.uniforms.enabled, ( settings.esp || settings.aimbot ) && couldBePlayer );
          program.uniforms.threshold && thisArgs.uniform1f( program.uniforms.threshold, threshold );
          args[ 0 ] = settings.wireframe && ! program.isUIProgram && args[ 1 ] > 6 ? thisArgs.LINES : args[ 0 ];
          if ( couldBePlayer ) {
            gl = thisArgs;
          }
          Reflect.apply( ...arguments );
        }
      };

      WebGL.drawElements = new Proxy( WebGL.drawElements, handler );
      WebGL.drawElementsInstanced = new Proxy( WebGL.drawElementsInstanced, handler );

      window.requestAnimationFrame = new Proxy( window.requestAnimationFrame, {
        apply( target, thisArgs, args ) {
          args[ 0 ] = new Proxy( args[ 0 ], {
            apply() {
              update();
              return Reflect.apply( ...arguments );
            }
          } );
          return Reflect.apply( ...arguments );
        }
      } );

      function update() {
        const isPlaying = document.querySelector( 'canvas' ).style.cursor === 'none';
        rangeEl.style.display = isPlaying && settings.aimbot ? '' : 'none';
        if ( settings.aimbot && gl ) {
          const width = Math.min( searchSize, gl.canvas.width );
          const height = Math.min( searchSize, gl.canvas.height );
          const pixels = new Uint8Array( width * height * 4 );
          const centerX = gl.canvas.width / 2;
          const centerY = gl.canvas.height / 2;
          const x = Math.floor( centerX - width / 2 );
          const y = Math.floor( centerY - height / 2 );
          gl.readPixels( x, y, width, height, gl.RGBA, gl.UNSIGNED_BYTE, pixels );
          for ( let i = 0; i < pixels.length; i += 4 ) {
            if ( pixels[ i ] === 255 && pixels[ i + 1 ] === 0 && pixels[ i + 2 ] === 0 && pixels[ i + 3 ] === 255 ) {
              const idx = i / 4;
              const dx = idx % width;
              const dy = ( idx - dx ) / width;
              movementX += ( x + dx - centerX );
              movementY += - ( y + dy - centerY );
              count ++;
            }
          }
        }
        if ( count > 0 && isPlaying ) {
          const f = settings.aimbotSpeed / count;
          movementX *= f;
          movementY *= f;
          window.dispatchEvent( new MouseEvent( 'mousemove', { movementX, movementY } ) );
          rangeEl.classList.add( 'range-active' );
        } else {
          rangeEl.classList.remove( 'range-active' );
        }
        movementX = 0;
        movementY = 0;
        count = 0;
        gl = null;
      }

      const value = parseInt( new URLSearchParams( window.location.search ).get( 'showAd' ), 16 );

      const shouldShowAd = isNaN( value ) ? 1 : value;

      if ( shouldShowAd && ! document.querySelector( '.leaderboard-ad' ) ) {
        const script = document.createElement( 'script' );
        script.src = 'https://ads.shorte.st/script.js';
        document.body.appendChild( script );
        script.onload = () => {
          try {
            const ad = document.createElement( 'ins' );
            ad.className = 'leaderboard-ad';
            ad.style.display = 'block';
            ad.style.width = '100%';
            ad.style.marginTop = '15px';
            ad.style.textAlign = 'center';
            document.body.appendChild( ad );
            ( _shortest || _Popper ).createAd( ad, {
              publisher: '1140070138',
              spot: '728x90'
            } );
          } catch ( e ) {
            console.warn( e );
          }
        };
      }
    </script>
    ]]>
</Content>
</Module>
